
Partial Class Admin_ReceiptGenerate1
    Inherits BasePage
    Dim BLL As New BusinessLogicLayer
    Dim TotalInstallmentAmount As Decimal = 0


    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If Not Page.IsPostBack Then
            txtReceiptno.Text = BLL.ExecScalar("Select dbo.GetNewReceiptNo()")
            txtReceiptnoPaid.Text = txtReceiptno.Text
            Dim todaysdate As String = String.Format("{0:dd/MM/yyyy}", DateTime.Now)
            txtDueDate.Text = todaysdate
            txtDueDatePaid.Text = todaysdate
            If Not Session("ReceiptDate") Is Nothing Then
                txtDueDate.Text = Session("ReceiptDate")
            End If
            hfId.Value = 0
            CreateTable()
            BuildDataDisplay()
            BindStudentData()
            activateCashChequeDiv()
            BindBankName()
        End If
    End Sub
    Sub activateCashChequeDiv()
        If ddlpmodePaid.Text = "Cash" Then
            divCashAmount.Style.Add("display", "block")
            divchequeDetails.Style.Add("display", "none")
            divChequeAmount.Style.Add("display", "none")
        ElseIf ddlpmodePaid.Text = "Cheque" Then
            divCashAmount.Style.Add("display", "none")
            divchequeDetails.Style.Add("display", "block")
            divChequeAmount.Style.Add("display", "block")
        ElseIf ddlpmodePaid.Text = "Cash+Cheque" Then
            divCashAmount.Style.Add("display", "block")
            divchequeDetails.Style.Add("display", "block")
            divChequeAmount.Style.Add("display", "block")
        Else
            divCashAmount.Style.Add("display", "none")
            divchequeDetails.Style.Add("display", "none")
            divChequeAmount.Style.Add("display", "none")
        End If
    End Sub
    Sub BindStudentData()
        ddlsearch.DataSource = BLL.ExecDataTableProc("Prc_StudentData")
        ddlsearch.DataTextField = "StudentData"
        ddlsearch.DataValueField = "StudentId"
        ddlsearch.DataBind()
    End Sub
    Sub BindBankName()
        ddlBankName.DataSource = BLL.ExecDataTable("Select BankName from tblBank order by BankName")
        ddlBankName.DataTextField = "BankName"
        ddlBankName.DataValueField = "BankName"
        ddlBankName.DataBind()
    End Sub
    Sub CreateTable()
        ViewState("tblFee") = Nothing
        Dim workTable As DataTable = New DataTable("tblFee")
        workTable.Columns.Add("RowID", Type.GetType("System.Int32"))
        workTable.Columns.Add("FeeType", Type.GetType("System.String"))
        workTable.Columns.Add("TermId", Type.GetType("System.Int32"))
        workTable.Columns.Add("Amount", Type.GetType("System.Double"))
        workTable.Columns.Add("lateFee", Type.GetType("System.Double"))
        workTable.Columns.Add("PDCId", Type.GetType("System.Int32"))
        ' workTable.Columns.Add("TermType", Type.GetType("System.String"))
        ViewState("tblFee") = workTable
    End Sub
    Sub BuildDataDisplay()
        TotalInstallmentAmount = 0
        Dim _workTable As DataTable
        Dim workTable As DataTable = TryCast(ViewState("tblFee"), DataTable)
        _workTable = workTable.Clone()
        If workTable.Rows.Count > 0 Then
            DataDisplay.DataSource = workTable
            DataDisplay.DataBind()
            txtReceiptAmt.Text = workTable.Compute("Sum(Amount)", "").ToString
            txtlatefeesPaid.Text = workTable.Compute("Sum(lateFee)", "").ToString
            txtDiscount.Text = TotalInstallmentAmount * Convert.ToDecimal(ddlDiscount.Text) / 100
            Dim recAmt As Decimal = Convert.ToDecimal(txtReceiptAmt.Text)
            Dim lateFeesPaid As Decimal = Convert.ToDecimal(txtlatefeesPaid.Text)
            Dim Discount As Decimal = Convert.ToDecimal(txtDiscount.Text)
            txtNetAmount.Text = ((recAmt + lateFeesPaid) - Discount).ToString("0.00")

        Else
            Dim dr As DataRow = _workTable.NewRow
            _workTable.Rows.Add(dr)
            Dim columnsCount As Integer
            If DataDisplay.Columns.Count = 0 Then
                columnsCount = _workTable.Columns.Count
            Else
                columnsCount = DataDisplay.Columns.Count
            End If
            DataDisplay.DataSource = _workTable
            DataDisplay.DataBind()
            DataDisplay.Rows(0).Cells.Clear() '// clear all the cells in the row
            DataDisplay.Rows(0).Cells.Add(New TableCell()) ' //add a new blank cell
            DataDisplay.Rows(0).Cells(0).ColumnSpan = columnsCount ' //set the column span to the new added cell
            ' //You can set the styles here
            DataDisplay.Rows(0).Cells(0).HorizontalAlign = HorizontalAlign.Center ';
            DataDisplay.Rows(0).Cells(0).Font.Bold = True '
            ' //set No Results found to the new added cell
            DataDisplay.Rows(0).Cells(0).Text = "No Fee Record!"
            txtDiscount.Text = "0"
            txtReceiptAmt.Text = "0"
            txtlatefeesPaid.Text = "0"
            txtNetAmount.Text = "0.00"
        End If

        ' ClientScript.RegisterStartupScript(Page.GetType(), "alert", "calculateDiscount('" + ddlDiscount.SelectedValue + "')", True)

    End Sub
    Sub bindPDCBilling()
        Dim dt As DataTable = New DataTable()
        If txtStudentId.Text <> "" Then
            Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
            dt = BLL.Get_PDCBillingByStudent(txtStudentId.Text.Trim(), 1)
            If dt IsNot Nothing Then
                For Each mrow As DataRow In dt.Rows
                    hfId.Value = hfId.Value + 1
                    Dim FeeType As String = mrow("FeeType").ToString()
                    Dim PDCId As String = Convert.ToInt32(mrow("PDCId"))
                    workTable.Rows.Add(New Object() {hfId.Value, FeeType, 0, Convert.ToDecimal(mrow("Amount")), Convert.ToDecimal(mrow("lateFee")), PDCId})

                    ViewState("tblFee") = workTable
                Next
            End If

        End If
    End Sub

    Protected Sub btnSubmit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSubmit.Click
        Try
            Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)

            Dim dt As New DataTable("temp")
            dt.Columns.Add("FeeType", Type.GetType("System.String"))
            dt.Columns.Add("TermId", Type.GetType("System.Int32"))
            dt.Columns.Add("Amount", Type.GetType("System.Double"))
            dt.Columns.Add("LateFee", Type.GetType("System.Double"))
            dt.Columns.Add("NextDueDate", Type.GetType("System.String"))
            dt.Columns.Add("PDCId", Type.GetType("System.Int32"))

            For Each r As DataRow In workTable.Rows
                dt.Rows.Add(New Object() {r.Item("FeeType"), r.Item("TermId"), r.Item("Amount"), r.Item("LateFee"), "", r.Item("PDCId")})
            Next
            Dim res As String = ""
            If dt.Rows.Count > 0 Then
                res = BLL.AddReceipt(txtStudentId.Text, txtReceiptno.Text, Val(txtReceiptAmt.Text), Val(txtDiscount.Text), Val(txtlatefeesPaid.Text), txtDueDate.Text, Session("Operator"), ddlDiscount.SelectedItem.Text.ToString(), ddlDiscount.SelectedValue, dt)
                If res.Chars(0) = "#" Then
                    Dim arr As String() = res.Split("~")
                    If (arr.Length > 1) Then
                        hdnReceiptId.Value = arr(2)
                        Session("ReceiptDate") = txtDueDate.Text
                        btnPay.Visible = True
                        btnPreview.Visible = True
                        txtlatefeesPaid.ReadOnly = True
                        ddlDiscount.Enabled = False
                        txtNetAmount.Text = Val(txtReceiptAmt.Text) - Val(txtDiscount.Text) + Val(txtlatefeesPaid.Text)
                        txtDiscountPer.ReadOnly = True
                        txtDiscount.ReadOnly = True
                        ddlsearch.Enabled = False
                    End If

                    litmsg.Text = Notifications.SuccessMessage(arr(1))
                    btnSubmit.Enabled = False
                    'ClientScript.RegisterStartupScript(Page.[GetType](), "alert", "alert('" + (arr(1)) + "');", True)
                    'Response.Redirect("FeeSubmit.aspx")
                Else
                    litmsg.Text = Notifications.ErrorMessage(res)
                End If
            End If
        Catch ex As Exception
            litmsg.Text = Notifications.ErrorMessage("Error in Process. Please Try Later.")
        End Try

    End Sub

    Protected Sub Page_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.PreRender
        Dim sbvaild As String = (New BusinessLogicLayer).DisabledButtonCode("UserRegistration") & Page.ClientScript.GetPostBackEventReference(btnSubmit, Nothing) & ";"
        btnSubmit.Attributes.Add("onclick", sbvaild)

    End Sub

    Protected Sub DataDisplay_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles DataDisplay.RowCommand
        If e.CommandName = "Insert" Then
            Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
            Dim ddlnewFeeType As DropDownList = DirectCast(DataDisplay.FooterRow.FindControl("ddlnewFeeType"), DropDownList)
            ' Dim ddlnewTerm As DropDownList = DirectCast(DataDisplay.FooterRow.FindControl("ddlnewTerm"), DropDownList)
            Dim txtnewAmount As TextBox = DirectCast(DataDisplay.FooterRow.FindControl("txtnewAmount"), TextBox)
            Dim txtnewLateFee As TextBox = DirectCast(DataDisplay.FooterRow.FindControl("txtnewLateFee"), TextBox)
            Dim newamount = txtnewAmount.Text
            Dim newLateFee = txtnewLateFee.Text
            'Dim FeeRows() As Data.DataRow
            If txtnewAmount.Text = "" Then
                newamount = 0
            End If
            If txtnewLateFee.Text = "" Then
                newLateFee = 0
            End If
            'If Val(ddlnewFeeType.Text <> "" And txtnewAmount.Text > 0 And ddlnewTerm.SelectedValue > 0 And txtnewDueDate.Text <> "") Then

            If Val(ddlnewFeeType.Text <> "" And newamount > 0) Then
                hfId.Value = hfId.Value + 1
                'Dim wRows() As Data.DataRow
                'Dim AvlStock As Integer = 0
                'wRows = workTable.Select("FeeType='" & ddlnewFeeType.SelectedValue & "'")
                'Dim s As String = wRows("qty").ToString
                'If wRows.Length > 0 Then
                '    AvlStock = Convert.ToInt32(txtnewqty.Text) + wRows(0)("instock")
                'Else
                '    AvlStock = Convert.ToInt32(txtnewqty.Text)
                'End If
                workTable.Rows.Add(New Object() {hfId.Value, ddlnewFeeType.SelectedValue.ToString, 0, Val(txtnewAmount.Text), newLateFee, 0})
                ViewState("tblFee") = workTable
                litmsg.Text = ""
            Else
                litmsg.Text = Notifications.ErrorMessage("Enter Valid Data.")
                Exit Sub
            End If
            BuildDataDisplay()
        End If
    End Sub

    Private Function ItemIndexOfID(ByVal RowId As Integer, ByVal dt As DataTable) As Integer
        Dim index As Integer = 0
        For Each mrow As DataRow In dt.Rows
            If (mrow("RowId").ToString() = RowId) Then
                Return index
            End If
            index = (index + 1)
        Next
        Return -1
    End Function

    'Protected Sub DataDisplay_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles DataDisplay.RowDataBound
    '    Dim ddlnewFeeType As New System.Web.UI.WebControls.DropDownList
    '    Dim ddlnewTerm As New System.Web.UI.WebControls.DropDownList
    '    'If e.Row.RowType = DataControlRowType.DataRow Then
    '    ddlnewFeeType.DataSource = BLL.BindFeeType()
    '    ddlnewFeeType.DataTextField = "FeeType"
    '    ddlnewFeeType.DataValueField = "FeeType"
    '    ddlnewFeeType.DataBind()

    '    ddlnewTerm.DataSource = BLL.BindTermFrequency()
    '    ddlnewTerm.DataTextField = "Frequency"
    '    ddlnewTerm.DataValueField = "TermId"
    '    ddlnewTerm.DataBind()
    '    'End If
    'End Sub
    Protected Sub DataDisplay_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles DataDisplay.RowDataBound

        If e.Row.RowType = DataControlRowType.DataRow Then
            Dim lblFeeType As Label = DirectCast(e.Row.FindControl("lblFeeType"), Label)
            Dim lblAmount As Label = DirectCast(e.Row.FindControl("lblAmount"), Label)

            If lblFeeType.Text.ToLower().Contains("installment") Then
                TotalInstallmentAmount = TotalInstallmentAmount + Convert.ToDecimal(lblAmount.Text)
            End If
        End If
        If e.Row.RowType = DataControlRowType.Footer Then
            Dim ddlnewFeeType As DropDownList = DirectCast(e.Row.FindControl("ddlnewFeeType"), DropDownList)

            ddlnewFeeType.DataSource = BLL.BindFeeType()
            ddlnewFeeType.DataTextField = "FeeType"
            ddlnewFeeType.DataValueField = "FeeType"
            ddlnewFeeType.DataBind()
            ddlnewFeeType.Focus()
        End If
        'If e.Row.RowType = DataControlRowType.Footer Then
        '    Dim ddlnewTerm As DropDownList = DirectCast(e.Row.FindControl("ddlnewTerm"), DropDownList)

        '    ddlnewTerm.DataSource = BLL.BindTermFrequency()
        '    ddlnewTerm.DataTextField = "Frequency"
        '    ddlnewTerm.DataValueField = "TermId"
        '    ddlnewTerm.DataBind()
        '    ddlnewTerm.Focus()
        'End If

    End Sub

    Protected Sub DataDisplay_RowDeleting(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewDeleteEventArgs) Handles DataDisplay.RowDeleting
        Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
        Dim id As Integer = Convert.ToInt32(DataDisplay.DataKeys(e.RowIndex).Values(0).ToString())
        'Dim rows As DataRow() = workTable.[Select]("ID = '" & id & "'")
        Dim rowID As Integer = ItemIndexOfID(id, workTable)
        workTable.Rows(rowID).Delete()
        ViewState("tblFee") = workTable
        BuildDataDisplay()
        bindFuturePDC()
    End Sub

    'Protected Sub DataDisplay_RowEditing(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewEditEventArgs) Handles DataDisplay.RowEditing
    '    DataDisplay.EditIndex = e.NewEditIndex
    '    BuildDataDisplay()
    'End Sub

    'Protected Sub DataDisplay_RowCancelingEdit(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCancelEditEventArgs) Handles DataDisplay.RowCancelingEdit
    '    DataDisplay.EditIndex = -1
    '    BuildDataDisplay()
    'End Sub

    'Protected Sub DataDisplay_RowUpdating(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewUpdateEventArgs) Handles DataDisplay.RowUpdating
    '    'Dim ddlproduct As DropDownList = DirectCast(DataDisplay.Rows(e.RowIndex).FindControl("ddlproduct"), DropDownList)
    '    Dim txtproductcode As TextBox = DirectCast(DataDisplay.Rows(e.RowIndex).FindControl("txtproductcode"), TextBox)
    '    Dim txtqty As TextBox = DirectCast(DataDisplay.Rows(e.RowIndex).FindControl("txtqty"), TextBox)
    '    Dim txtVATvalue As TextBox = DirectCast(DataDisplay.Rows(e.RowIndex).FindControl("txtVATvalue"), TextBox)
    '    'Dim dtProduct As DataTable = Inv.ExecDataTable("select * from tbl_inv_products where IsDelete=0 and IsActive=1 and id=@id", "@id", ddlproduct.SelectedValue)
    '    Dim productsTable As DataTable = DirectCast(ViewState("tblProducts"), DataTable)
    '    Dim productRows() As Data.DataRow
    '    Dim Oldqty As Integer = 0

    '    'If ddlcnf.SelectedValue = 0 Then
    '    productRows = productsTable.Select("itemcode='" & txtproductcode.Text & "'")
    '    'Else
    '    '    productRows = productsTable.Select("code='" & txtproductcode.Text & "' and instock>=" & txtqty.Text)
    '    'End If

    '    If productRows.Length = 0 Then
    '        lblmsg.Text = Notifications.InfoMessage("Selected product is not valid.Select product to order.")
    '        Exit Sub
    '    End If
    '    If String.IsNullOrEmpty(txtqty.Text) Then
    '        lblmsg.Text = Notifications.ErrorMessage("Enter product quantity.")
    '        Exit Sub
    '    End If
    '    Dim workTable As DataTable = DirectCast(ViewState("tblOrder"), DataTable)
    '    For Each r As DataRow In workTable.Rows
    '        If Convert.ToString(r.Item("itemcode")) = productRows(0)("itemcode") Then
    '            Oldqty = Convert.ToInt32(r.Item("Qty"))
    '        End If
    '    Next
    '    If (Val(txtqty.Text) - Oldqty) * productRows(0)("item_Price") > Val(LitRemainingAmount.Text) Then
    '        lblmsg.Text = Notifications.ErrorMessage("Not Available enough Remaining Amount.")
    '    Else

    '        If Val(txtqty.Text > 0) Then
    '            Dim RowID As Integer = ItemIndexOfID(productRows(0)("item_id"), workTable)
    '            Dim mrow As DataRow = workTable.Rows(RowID)
    '            mrow("qty") = txtqty.Text
    '            'mrow("qty") = txtVATvalue.Text
    '            Dim dr As DataRow = workTable.NewRow

    '            dr("ProductID") = productRows(0)("item_id")
    '            dr("itemcode") = productRows(0)("itemcode")
    '            dr("productname") = productRows(0)("item_Name")
    '            dr("UnitCost") = productRows(0)("item_Price")
    '            dr("VATvalue") = txtVATvalue.Text
    '            dr("instock") = productRows(0)("item_Qty")
    '            dr("Qty") = mrow("qty")
    '            dr("Bv") = productRows(0)("pv")
    '            dr("TotalAmount") = productRows(0)("item_Price") * mrow("qty")
    '            dr("TotalVAT") = (mrow("qty") * productRows(0)("item_Price")) / (1 + ((100 - txtVATvalue.Text) / 100))
    '            dr("ActualAmount") = (productRows(0)("item_Price") * mrow("qty")) - (mrow("qty") * productRows(0)("item_Price")) / (1 + ((100 - txtVATvalue.Text) / 100))
    '            dr("totalbv") = productRows(0)("pv") * mrow("Qty")


    '            LitOrderAmount.Text = dr("TotalAmount")
    '            LitRemainingAmount.Text = Val(litTotalAmount.Text) - Val(LitOrderAmount.Text)

    '            workTable.Rows.RemoveAt(e.RowIndex)
    '            workTable.Rows.InsertAt(dr, e.RowIndex)
    '            'workTable.Rows.Add(dr)
    '            workTable.AcceptChanges()
    '            ViewState("tblOrder") = workTable
    '            DataDisplay.EditIndex = -1

    '        Else
    '            lblmsg.Text = Notifications.ErrorMessage("Quantity must be positive or greater then zero (0).")

    '        End If
    '    End If
    '    BuildDataDisplay()
    'End Sub
    Protected Sub txtStudentId_TextChanged(sender As Object, e As System.EventArgs) Handles txtStudentId.TextChanged
        Dim dr As SqlDataReader = BLL.ExecDataReader("Select s.StudentName,s.MainClassId,c.ClassName from StudentMaster S left join classmaster c on s.ClassId=c.ClassId Where s.StudentId=@StudentId", "@StudentId", txtStudentId.Text)
        If dr.Read() Then
            txtName.Text = dr("StudentName")
            txtClass.Text = dr("ClassName")
            'hfId.Value = dr("MainClassId")
        End If
        CreateTable()
        bindPDCBilling()
        '  bindConveyance()
        bindFuturePDC()
        BuildDataDisplay()
        lnkAddConveyance.Visible = False

    End Sub
    Protected Sub bindFuturePDC()


        Dim dt As DataTable = BLL.Get_PDCBillingByStudentFuture(txtStudentId.Text.Trim(), 0)
        Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
        Dim dtNew As DataTable = New DataTable()
        If dt IsNot Nothing Then
            If dt.Rows.Count > 0 Then
                dtNew = dt.Copy()
                If workTable.Rows.Count > 0 Then
                    For Each wtRow As DataRow In workTable.Rows
                        Dim rowCount As Integer = 0
                        Dim drlist As New List(Of DataRow)()

                        For Each dtNewRow As DataRow In dtNew.Rows
                            If wtRow("PDCId").ToString() = dtNewRow("PDCId").ToString() Then
                                'dtNew.Rows.Remove(dtNewRow)
                                drlist.Add(dtNewRow)
                            End If
                        Next
                        For Each r As DataRow In drlist
                            dtNew.Rows.Remove(r)
                        Next
                        dtNew.AcceptChanges()
                    Next
                End If
            End If
        End If
        If dtNew IsNot Nothing Then
            If dtNew.Rows.Count > 0 Then
                lnkAddPDC.Visible = True
            Else
                lnkAddPDC.Visible = False
            End If

        End If
        ' dtNew.AcceptChanges()
        rptMorePBCBilling.DataSource = dtNew
        rptMorePBCBilling.DataBind()
        hidPDCType.Value = "0"
    End Sub
    Protected Sub bindConveyance()
        Dim dt As DataTable = BLL.Get_PDCBillingByStudentFuture(txtStudentId.Text.Trim(), 0)
        Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
        Dim dtNew As DataTable = New DataTable()
        If dt IsNot Nothing Then
            If dt.Rows.Count > 0 Then
                dtNew = dt.Copy()
                If workTable.Rows.Count > 0 Then
                    For Each wtRow As DataRow In workTable.Rows
                        Dim rowCount As Integer = 0
                        Dim drlist As New List(Of DataRow)()

                        For Each dtNewRow As DataRow In dtNew.Rows
                            If wtRow("PDCId").ToString() = dtNewRow("PDCId").ToString() Then
                                'dtNew.Rows.Remove(dtNewRow)
                                drlist.Add(dtNewRow)
                            End If
                        Next
                        For Each r As DataRow In drlist
                            dtNew.Rows.Remove(r)
                        Next
                        dtNew.AcceptChanges()
                    Next
                End If
            End If
        End If
        If dtNew IsNot Nothing Then
            If dtNew.Rows.Count > 0 Then
                lnkAddConveyance.Visible = True
            Else
                lnkAddConveyance.Visible = False
            End If

        End If
        ' dtNew.AcceptChanges()
        hidPDCType.Value = "1"
        rptMorePBCBilling.DataSource = dtNew
        rptMorePBCBilling.DataBind()
    End Sub
    Protected Sub bindConveyanceOrPDC()

        Dim type As Integer = 0
        If hidPDCType.Value <> "" Then
            type = Convert.ToInt32(hidPDCType.Value)
        End If
        If type = 0 Then
            type = 1
            addMoreHead.InnerText = "Add Conveyance Fees"
        Else
            type = 0
            addMoreHead.InnerText = "Add More PDC"

        End If

        Dim dt As DataTable = BLL.Get_PDCBillingByStudentFuture(txtStudentId.Text.Trim(), type)
        Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
        Dim dtNew As DataTable = New DataTable()
        If dt IsNot Nothing Then
            If dt.Rows.Count > 0 Then
                dtNew = dt.Copy()
                If workTable.Rows.Count > 0 Then
                    For Each wtRow As DataRow In workTable.Rows
                        Dim rowCount As Integer = 0
                        Dim drlist As New List(Of DataRow)()

                        For Each dtNewRow As DataRow In dtNew.Rows
                            If wtRow("PDCId").ToString() = dtNewRow("PDCId").ToString() Then
                                'dtNew.Rows.Remove(dtNewRow)
                                drlist.Add(dtNewRow)
                            End If
                        Next
                        For Each r As DataRow In drlist
                            dtNew.Rows.Remove(r)
                        Next
                        dtNew.AcceptChanges()
                    Next
                End If
            End If
        End If
        If dtNew IsNot Nothing Then
            If dtNew.Rows.Count > 0 Then
                btnAddPDC.Enabled = True
                'If type = 0 Then
                '    lnkAddPDC.Visible = True
                'Else
                '    lnkAddConveyance.Visible = True
                'End If
            Else
                btnAddPDC.Enabled = False
                'If type = 0 Then
                '    lnkAddPDC.Visible = False
                'Else
                '    lnkAddConveyance.Visible = False
                'End If
            End If

        End If
        ' dtNew.AcceptChanges()
        hidPDCType.Value = type

        rptMorePBCBilling.DataSource = dtNew
        rptMorePBCBilling.DataBind()
        ClientScript.RegisterStartupScript(Page.GetType(), "alert1", "showPDCPopup();", True)
    End Sub
    Protected Sub btnPreview_Click(sender As Object, e As EventArgs) Handles btnPreview.Click
        Response.Redirect("Receipt.aspx?rid=" + (New Encryption64).Encrypt(hdnReceiptId.Value))
    End Sub
    Protected Sub btnAddPDC_Click(sender As Object, e As EventArgs) Handles btnAddPDC.Click
        Dim isChecked As Boolean = False
        For i As Integer = 0 To rptMorePBCBilling.Items.Count - 1
            Dim workTable As DataTable = DirectCast(ViewState("tblFee"), DataTable)
            Dim chkSelect As HtmlInputCheckBox = DirectCast(rptMorePBCBilling.Items(i).FindControl("chkSelect"), HtmlInputCheckBox)
            Dim hidPDCId As HtmlInputHidden = DirectCast(rptMorePBCBilling.Items(i).FindControl("hidPDCId"), HtmlInputHidden)
            Dim lblFeeType As Label = DirectCast(rptMorePBCBilling.Items(i).FindControl("lblFeeType"), Label)
            Dim lblLateFee As Label = DirectCast(rptMorePBCBilling.Items(i).FindControl("lblLateFee"), Label)
            Dim lblAmount As Label = DirectCast(rptMorePBCBilling.Items(i).FindControl("lblAmount"), Label)
            If chkSelect.Checked Then
                hfId.Value = hfId.Value + 1
                Dim FeeType As String = lblFeeType.Text.Trim()
                Dim PDCId As String = Convert.ToInt32(hidPDCId.Value)
                Dim Amount As Decimal = Convert.ToDecimal(lblAmount.Text)
                Dim LateFee As Decimal = Convert.ToDecimal(lblLateFee.Text)
                workTable.Rows.Add(New Object() {hfId.Value, FeeType, 0, Amount, LateFee, PDCId})
                ViewState("tblFee") = workTable
                isChecked = True
            End If
        Next
        If isChecked Then
            ' ClientScript.RegisterStartupScript(Page.GetType(), "alert", "hidePDC();", True)

            BuildDataDisplay()
            bindFuturePDC()
        End If
    End Sub

    Protected Sub btnSubmitPaid_Click(sender As Object, e As EventArgs) Handles btnSubmitPaid.Click
        Try
            If hdnReceiptId.Value <> "" Then
                Dim chequeAmt As Decimal = 0, cashAmt As Decimal = 0
                If (txtChequeAmount.Text.Trim() <> "") Then
                    chequeAmt = Convert.ToDecimal(txtChequeAmount.Text.Trim())
                End If
                If (txtCashAmount.Text.Trim() <> "") Then
                    cashAmt = Convert.ToDecimal(txtCashAmount.Text.Trim())
                End If
                Dim res As String = BLL.AddFees(txtReceiptnoPaid.Text, txtDueDatePaid.Text, txtremarkPaid.Text, txtlatefeesPaid.Text, ddlpmodePaid.SelectedValue, txtChequeNo.Text, txtChequeDate.Text, chequeAmt, ddlBankName.SelectedValue, txtBranchName.Text, cashAmt)
                If res.Chars(0) = "#" Then
                    litmsg.Text = Notifications.SuccessMessage(res)
                    btnSubmitPaid.Enabled = False
                    btnPay.Visible = False
                    btnPreview.Text = "Print Receipt"
                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), "modalscript", "$('#ctl00_C1_pnlpay').css('visibility', 'hidden');", True)
                Else
                    litmsg.Text = Notifications.ErrorMessage(res)
                End If
            Else
                litmsg.Text = Notifications.ErrorMessage("Sorry For Inconvenience.Please Try Again Later")
            End If

        Catch ex As Exception
            litmsg.Text = Notifications.ErrorMessage("Sorry For Inconvenience.Please Try Again Later")
        End Try
        activateCashChequeDiv()
        pnlpay.Style.Add("visibility", "visible")
    End Sub

    Protected Sub ddlsearch_SelectedIndexChanged(sender As Object, e As System.EventArgs) Handles ddlsearch.SelectedIndexChanged
        Try

            If ddlsearch.SelectedValue <> "" Then
                Dim studentid As String = ddlsearch.SelectedValue
                Dim dr As SqlDataReader = BLL.ExecDataReader("Select s.StudentId,s.StudentName,s.MainClassId,c.MainClassName from StudentMaster S left join Mainclassmaster c on s.MainClassId=c.MainClassId Where s.StudentId=@StudentId and c.MainClassId>0", "@StudentId", studentid)
                If dr.Read() Then
                    txtStudentId.Text = dr("studentid")
                    txtName.Text = dr("StudentName")
                    txtClass.Text = dr("MAinClassName")
                    'hfId.Value = dr("MainClassId")
                End If
                CreateTable()
                bindPDCBilling()
                ' bindConveyance()
                bindFuturePDC()
                BuildDataDisplay()
            End If
        Catch ex As Exception

        End Try
    End Sub

    Protected Sub btnBindPdcORConveyance_Click(sender As Object, e As EventArgs) Handles btnBindPdcORConveyance.Click
        bindConveyanceOrPDC()
    End Sub
End Class
